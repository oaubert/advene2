Important improvements
======================

- implement read or write locking, "force", and "readonly" in _SqliteBackend

- implement notification of events

Minor improvements, to do one day
=================================

Element related
---------------

- make dirty/clean more aggressive: creation of elements should be added to
  their cleaning operations, but beware: that involves cleaning elements on
  which they depend -- e.g. before creating an annotation, its media must
  be clean -- because it may require creation too

Backend related
---------------

- add indexes in the SQL schema (Annotations.f_begin at least)
  and test its efficiency

Misc
----

- remove unused code in advene/utils once we are sure we won't use it

- remove "unstable and experimental" in parser and serializer docstrings (once
  it is stabilized and tested, that is ;)

- find a better alternative to tmpnam in advene_zip's (parser and serialiser)

- use notification of events, once implemented, to clean the package root
  created by advene_zip serializer and parser

Open questions and remarks
==========================

- Olivier would like collection-like objects (own-group, all-group, relations,
  lists...) to implement __getitem__. I do not see the real added value since,
  if you know the id, you would rather call package[id] than package.own[id]
  or package.own.annotations[id]. To discuss...

- the dirty/clean principle may improve performances in the long run, but it
  causes a few vicious bugs: operations relying on the backend may be fooled
  by the fact that the backend is not up-to-date... So if you get an
  unexplained bug, ask yourself if the buggy function relies on caches or on
  the backend, and try cleaning all the involved objects.
