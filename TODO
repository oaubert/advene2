Important improvements
======================

- rename advene core to advene cam

- add parameters X_with_prefix and X_exclude_prefix in backend_methods
  (id_with_prefix, id_exclude_prefix, media_with_prefix, etc...)

- augment backend method iter_tags_with_element with attributes tag_with_prefix
  and tag_exclude_prefix ; may be symetric iter_elements_with_tags

- remove all list generations ending with "," in backends/sqlite.py

- replace executescript by a list of execute in backends/sqlite.py -- 
  make the .sql file a .py file

- implement read or write locking, "force", and "readonly" in _SqliteBackend

- implement notification of events (probably with a mixin for registration/
  unregistration mechanisms)

- implement content handlers for queries and models, in the same way it has
  been done for views

- implement TALES support, and find a *clean* way to add TALES-specific
  methods; for example, elements should have a tal-method ``tags``, so that

    ``a_package/i:e/tags``

  would be equivalent to the following python:::

    a_package["i:e"].iter_tags(a_package)

  We can see that the first item of the TALES path (``a_package``) is used
  as a context for following items; that notion of "context" does not exist
  in python (``a_package`` must be explicitly passed to ``iter_tags``) and it
  seems like a good idea (explicit is better than implicit). Since TALES does
  favour no-arguments function, however, the context may help here.

  Other common patterns in TALES are like:

    ``a_package/view/i:v``

  where the second item kind of takes the third as a parameter. This should
  be cleanly implemented.

- advene_zip: make unit test with accented filenames stored in the
   package, to ensure that there is no problem with multiplaform
   encodings

Minor improvements, to do one day
=================================

Backend related
---------------

- add indexes in the SQL schema (Annotations.f_begin at least)
  and test its efficiency

Misc
----

- remove unused code in advene/utils once we are sure we won't use it

- remove "unstable and experimental" in parser and serializer docstrings (once
  it is stabilized and tested, that is ;)

- use notification of events, once implemented, to clean the package root
  created by parsers/advene_zip.py and content.py

Open questions and remarks
==========================

- Olivier would like collection-like objects (own-group, all-group, relations,
  lists...) to implement __getitem__. I do not see the real added value since,
  if you know the id, you would rather call package[id] than package.own[id]
  or package.own.annotations[id]. To discuss...

- from Jul 13 2007 to Aug 03 2007, module advene.model.core.dirty was used to
  delay accesses to the backend, in order to make modifications more
  responsive. It appeared that this was no a good idea: the backend is not only
  used for storage, but also for *indexing*. As a consequence, many methods
  rely on the backend for efficient retrieval of sequences of objects, hence
  requiring the cleaning of involved objects, and hindering access for the
  sake of modifications. So that functionality has been discarded. Should it
  become necessary in the future (the current sqlite backend seems to be
  responsive enough, anyway), it should probably be implemented at the backend
  level itself.
