Important improvements
======================

- implement read or write locking, "force", and "readonly" in _SqliteBackend

- implement notification of events

Minor improvements, to do one day
=================================

Backend related
---------------

- add indexes in the SQL schema (Annotations.f_begin at least)
  and test its efficiency

Misc
----

- remove unused code in advene/utils once we are sure we won't use it

- remove "unstable and experimental" in parser and serializer docstrings (once
  it is stabilized and tested, that is ;)

- find a better alternative to tmpnam in advene_zip's (parser and serialiser)

- use notification of events, once implemented, to clean the package root
  created by parsers/advene_zip.py and content.py

Open questions and remarks
==========================

- Olivier would like collection-like objects (own-group, all-group, relations,
  lists...) to implement __getitem__. I do not see the real added value since,
  if you know the id, you would rather call package[id] than package.own[id]
  or package.own.annotations[id]. To discuss...

- from Jul 13 2007 to Aug 03 2007, module advene.model.core.dirty was used to
  delay accesses to the backend, in order to make modifications more
  responsive. It appeared that this was no a good idea: the backend is not only
  used for storage, but also for *indexing*. As a consequence, many methods
  rely on the backend for efficient retrieval of sequences of objects, hence
  requiring the cleaning of involved objects, and hindering access for the
  sake of modifications. So that functionality has been discarded. Should it
  become necessary in the future (the current sqlite backend seems to be
  responsive enough, anyway), it should probably be implemented at the backend
  level itself.
