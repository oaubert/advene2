NAMES
-----

use underscored_names (python style) for attributes and methods
use CaptializedNames (java style) for class names
NB: some classes could be function; they may be named in python_style

module names are lowercase, short-names (preferably meaningful).
packages must be named in python style

words composing an identifier should always be separated (in the appropriate
style)
words should not be abbreviated

method names should start with a verb
boolean property names should be an adjective
other property names should be a noun
iterable property names should be plural

SYNTAX
------

relative import is authorized only when the module name is a class name

SEMANTIC
--------

read-only properties should be prefered to methods with only self as parameter

methods and properties should rather return an iterator than another iterable,
except when the iterable is already available and may be safely returned

as a consequence, generic APIs should stick to iterators, since they should not
make asumption on the availability of an iterable in the underlying 
implementations

whenever possible, the raising of an exception should be avoidable, and should
not be the default behaviour. A good practice is to accept advene.RAISE as a
special parameter to indicate that an exception should be raised in the
appropriate case.

REFERENCES
----------

Weak references are intensievly used, to enable efficient collecting of the objects and freeing of resources.

The rule of thumb is: in a hierarchy of objects, children should strongly reference their parent (because they need it for most tasks), while parents should only weakly reference their children, and re-generate them whenever needed. This is especially true in the backend-supported objects; the backend does not keep track of all the objects referencing it, so it is cleaned whenever collected by the GC.

However, there ar exceptions. Contents are mere *attributes* of their parent, and are unlikely to be referenced by themselves, so they will keep being regenerated, whhich might prove costlty (especially for contents containing big data). So those objects will be strongly referenced by their parent, and will maintain a weak reference to their parent, but a strong reference to their grand-parent (i.e. Package), in order to be able to re-generate their parents eventually (though this is not likely to happen often, since Contents are not expected to be referenced outside their parent).
